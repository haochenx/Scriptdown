{
  var Invocation = function(name,payload,arg) {
    this.name = name;
    this.payload = payload;
    this.arg = arg;
  }

  var Macro = function(name,payload,arg) {
    Invocation.call(this,name,payload,arg);
  }
  Macro.prototype = Object.create(Invocation.prototype);

  var ExternalRenderer = function(name,payload,arg) {
    Invocation.call(this,name,payload,arg);
  }
  ExternalRenderer.prototype = Object.create(Invocation.prototype);

  var CompileInstruction = function(name,payload,arg) {
    Invocation.call(this,name,payload,arg);
  }
  CompileInstruction.prototype = Object.create(Invocation.prototype);

  var CrossRef = function(name,payload) {
    Invocation.call(this,name,payload);
  }
  CrossRef.prototype = Object.create(Invocation.prototype);

}

start
  = pieces

alphabet = [A-Za-z]
alphanum = alphabet / [0-9]
punct = [!-//:-@\[-`{-~]
whitespace = [ \n\r\t]

escape = "\\"
escaped = [\\\[\]]
unescaped
  = alphanum / " " / (! escaped) ch:punct { return ch; }

char
  = unescaped
  / escape seq:(
             "[" { return "["; } /
             "]" { return "]"; } /
             "n" { return "\n"; } /
             "r" { return "\r"; } /
             "t" { return "t"; }
           ) { return seq; }
punct_char
  = (! alphanum) char:char { return char; }

whitespaces = whitespace+ { return " "; }

word = chars:alphanum+ { return chars.join(""); }
puncts = puncts:punct_char+ { return puncts.join(""); }
text_token
  = word / puncts / whitespaces
text
  = first:text_token rest:text { return [first].concat(rest); }
  / first:text_token { return [first]; }

id_first_char = alphabet / [._]
id_rest_char = id_first_char / alphanum

id = first:id_first_char rest:id_rest_char* { return [first].concat(rest).join(""); }

invocation
  = macro
  / exrend
  / crossref
  / compinst

piece
  = invocation
  / text

pieces
  = first:piece rest:pieces { return [first].concat(rest); }
  / first:piece { return [first]; }
  /

invocation_arg
  = ":" word:word { return word; }

macro
  = "[" payload:pieces "]" "(" name:id arg:invocation_arg? ")"
    { return new Macro(name,payload,arg); }

exrend
  = "[" payload:char* "]" "(" "!" name:id arg:invocation_arg? ")"
    { return new ExternalRenderer(name,payload.join(""),arg); }

crossref
  = "[" payload:pieces "]" "(" "@" name:id ")"
    { return new CrossRef(name,payload); }

compinst
  = "[" payload:char* "]" "(" "!!" name:id arg:invocation_arg? ")"
    { return new CompileInstruction(name,payload.join(""),arg); }
